/// <reference types="node" />
import { EventEmitter } from 'events';
import { ResultsEntity } from './interfaces';
interface DroneMobileConfig {
    username: string;
    password: string;
}
interface SessionInfo {
    accessToken: string | null;
}
declare class DroneMobile extends EventEmitter {
    private config;
    sessionInfo: SessionInfo;
    constructor(config: DroneMobileConfig);
    private onInit;
    /**
     * Login to the API and get a accessToken to use for subsequent requests
     */
    login(): Promise<string>;
    /**
     * Gets the current list of vehicles tied to the account
     * @returns Promise
     */
    vehicles(): Promise<ResultsEntity[]>;
    /**
     * Sends the start command to the vehicle
     * @param vehicleId Id of the vehicle to target
     */
    start(vehicleId: string): Promise<string>;
    /**
     * Sends the stop command to the vehicle
     * @param vehicleId Id of the vehicle to target
     */
    stop(vehicleId: string): Promise<string>;
    /**
     * Sends a lock command to the vehicle
     * @param vehicleId Id of the vehicle to target
     */
    lock(vehicleId: string): Promise<string>;
    /**
     * Sends an unlock command to the vehicle
     * @param vehicleId Id of the vehicle to target
     */
    unlock(vehicleId: string): Promise<string>;
    /**
     * Sends an Open Trunk command to the vehicle
     * @param vehicleId Id of the vehicle to target
     */
    trunk(vehicleId: string): Promise<string>;
    /**
     * Sends a command to the vehicle to toggle the action assigned to aux1
     * @param vehicleId Id of the vehicle to target
     */
    aux1(vehicleId: string): Promise<string>;
    /**
     * Sends a command to the vehicle to toggle the action assigned to aux2
     * @param vehicleId Id of the vehicle to target
     */
    aux2(vehicleId: string): Promise<string>;
    /**
     * Gets the location of the vehicle
     * @param vehicleId Id of the vehicle to target
     */
    location(vehicleId: string): Promise<any>;
    /**
     * Gets the status of the vehicle
     * @param vehicleId Id of the vehicle to target
     */
    status(vehicleId: string): Promise<ResultsEntity | undefined | null>;
}
export default DroneMobile;
